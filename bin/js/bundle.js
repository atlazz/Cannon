var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameScene_1 = require("./script/runtime/GameScene");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/runtime/GameScene.ts", GameScene_1.default);
    };
    GameConfig.width = 720;
    GameConfig.height = 1280;
    GameConfig.scaleMode = "showall";
    GameConfig.screenMode = "vertical";
    GameConfig.alignV = "middle";
    GameConfig.alignH = "center";
    GameConfig.startScene = "game/GameScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = true;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/runtime/GameScene":7}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** version */
exports.VERSION = "1.0.0";
/** pages */
exports.URL_HomeView = "home/HomeView.scene";
exports.URL_GameScene = "game/GameScene.scene";
exports.URL_OverView = "over/OverView.scene";
exports.URL_ReviveView = "dialog/ReviveView.scene";
/** camera */
exports.CameraInitPos = new Laya.Vector3(0, 0.3, 0.2);
exports.CameraInitRotEuler = new Laya.Vector3(0, 0, 0);
/** directional light */
exports.LightInitPos = new Laya.Vector3(0, 5, 0);
exports.LightInitRotEuler = new Laya.Vector3(-30, 0, 0);
exports.LightInitColor = new Laya.Vector3(1, 1, 1);
/** game stage */
exports.StageTexUrl = [
    // stand
    "res/stage/out/materials/mutou_06.jpg",
    // target wood
    "res/stage/out/materials/box 13.png",
    // target TNT
    "res/stage/out/materials/TNT.png",
];
exports.StageResUrl = "res/stage/out/";
exports.StageInitPos = new Laya.Vector3(0, 0, 0);
exports.StageInitRot = new Laya.Vector3(0, 180, 0);
exports.StageInitScale = new Laya.Vector3(20, 20, 20);
exports.StageNum = 80;
// winning check frame
exports.MaxWinCheckTime = 60;
// 屏蔽物体物理受力前等待时间
exports.SetKinematicWaitTime = 10;
/** background */
exports.BgResUrl = [
    "res/scene/Scenes_02.lh",
    "res/scene/Scenes_04.lh",
    "res/scene/Scenes_07.lh",
];
/** glass */
exports.GlassBrokenVelocity = 2.5;
/** piece of target object */
exports.PieceResUrl = "res/cube_piece.lm";
exports.PiecesNum = 3;
exports.PiecesBrokenTime = 120;
exports.CannonResUrl = [
    "res/cannon/Cannon_01.lh",
    "res/cannon/Cannon_22.lh",
];
exports.CannonInitPos = new Laya.Vector3(0, 0.05, -0.2);
exports.CannonInitRot = new Laya.Vector3(0, 180, 0);
exports.CannonInitScale = new Laya.Vector3(25, 25, 25);
exports.TurretInitLocalRot = new Laya.Vector3(0, 0, 0);
/** bullet */
exports.BulletResUrl = "res/bullet.lh";
// init radius
exports.BulletRadius = 0.08;
// scale
exports.BulletScale = [
    1,
    1.2,
];
// mass
exports.BulletMass = [
    10,
    10,
];
// velocity
exports.BulletVelocity = [
    40,
    40,
];
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameScene_1 = require("../runtime/GameScene");
var BulletScript = /** @class */ (function (_super) {
    __extends(BulletScript, _super);
    function BulletScript() {
        var _this = _super.call(this) || this;
        _this.type = 0 /* DEFAULT */;
        _this.lifetime = 120;
        _this.collisionBlackList = ["bullet", "player"];
        _this.flag_active = false;
        return _this;
    }
    BulletScript.prototype.onAwake = function () {
        this.bullet = this.owner;
        this.rigidbody = this.bullet.getComponent(Laya.Rigidbody3D);
        // new mat: 初始隐身
        this.material = new Laya.PBRSpecularMaterial();
        this.material.renderMode = Laya.PBRSpecularMaterial.RENDERMODE_FADE;
        this.material.albedoColorA = 0;
        this.bullet.meshRenderer.material = this.material;
    };
    BulletScript.prototype.onUpdate = function () {
        var _this = this;
        // check spirte alive
        if (this.bullet.destroyed) {
            this.destroy();
            return;
        }
        // update lifetime
        this.lifetime--;
        if (this.lifetime < 0) {
            Laya.timer.frameOnce(1, this, function () {
                // update counter
                GameScene_1.default.instance.currBulletNum++;
                // destroy
                _this.destroy();
                _this.bullet.destroy();
            });
        }
        // 超出炮管距离才显示，根据z轴判断
        if (!this.flag_active && this.bullet.transform.position.z < -1) {
            this.refreshMaterial();
            this.flag_active = true;
        }
    };
    /** refresh material by type */
    BulletScript.prototype.refreshMaterial = function () {
        if (this.type === 0 /* DEFAULT */) {
            this.material.renderMode = Laya.PBRSpecularMaterial.RENDERMODE_OPAQUE;
            this.material.albedoColor = new Laya.Vector4(1, 0, 0, 1);
        }
        else if (this.type === 1 /* FROZEN */) {
            this.material.renderMode = Laya.PBRSpecularMaterial.RENDERMODE_TRANSPARENT;
            this.material.albedoColor = new Laya.Vector4(0.2, 0.2, 1, 0.7);
        }
    };
    return BulletScript;
}(Laya.Script3D));
exports.default = BulletScript;
},{"../runtime/GameScene":7}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Const = require("../Const");
var Guard = /** @class */ (function (_super) {
    __extends(Guard, _super);
    function Guard() {
        var _this = _super.call(this) || this;
        _this.moveTimes = 0;
        return _this;
    }
    Guard.prototype.onAwake = function () {
        // get sprite
        this.guard = this.owner;
        // get size
        var boundingBox = this.guard.meshFilter.sharedMesh.boundingBox.clone();
        this.sizeX = boundingBox.max.x - boundingBox.min.x;
        this.sizeY = boundingBox.max.y - boundingBox.min.y;
        this.sizeZ = boundingBox.max.z - boundingBox.min.z;
        // add collider
        var collider = this.guard.addComponent(Laya.PhysicsCollider);
        collider.colliderShape = new Laya.BoxColliderShape(this.sizeX, this.sizeY, this.sizeZ);
        // add material
        var material = new Laya.PBRSpecularMaterial();
        material.albedoTexture = Laya.loader.getRes(Const.StageTexUrl[0]);
        material.specularColor = new Laya.Vector4(0, 0, 0, 1);
        material.enableEmission = true;
        material.emissionColor = new Laya.Vector4(0.2, 0.2, 0.2, 1);
        this.guard.meshRenderer.material = material;
        /** 平移参数设置 */
        // 全屏水平移动
        if (this.guard.name.search("move_x") >= 0) {
            this.MaxMoveTimes = 120;
            this.moveStepY = 0;
            // 旋转了90度
            if (Math.floor((Math.abs(this.guard.transform.localRotationEulerZ) + 90.5) % 180) === 0) {
                this.moveStepX = this.guard.transform.localPositionY * 2 / this.MaxMoveTimes;
            }
            else {
                this.moveStepX = this.guard.transform.localPositionX * 2 / this.MaxMoveTimes;
            }
        }
        // 全屏纵向移动
        else if (this.guard.name.search("move_y") >= 0) {
            this.MaxMoveTimes = 120;
            this.moveStepX = 0;
            // 旋转了90度
            if (Math.floor((Math.abs(this.guard.transform.localRotationEulerZ) + 90.5) % 180) === 0) {
                this.moveStepY = this.guard.transform.localPositionX * 2 / this.MaxMoveTimes;
            }
            else {
                this.moveStepY = this.guard.transform.localPositionY * 2 / this.MaxMoveTimes;
            }
        }
        // 半屏移动
        else if (this.guard.name.search("move_") >= 0) {
            this.MaxMoveTimes = 60;
            // X和Y方向平移步进
            var stepX = this.sizeX * this.guard.transform.localScaleX / 2 / this.MaxMoveTimes;
            var stepY = this.sizeY * this.guard.transform.localScaleY / 2 / this.MaxMoveTimes;
            // Z轴旋转90，X和Y互换
            if (Math.floor((Math.abs(this.guard.transform.localRotationEulerZ) + 90.5) % 180) === 0) {
                var tmp = stepX;
                stepX = stepY;
                stepY = tmp;
            }
            if (this.guard.name.search("move_left") >= 0) {
                this.moveStepX = -stepX;
                this.moveStepY = 0;
            }
            else if (this.guard.name.search("move_right") >= 0) {
                this.MaxMoveTimes = 60;
                this.moveStepX = stepX;
                this.moveStepY = 0;
            }
            else if (this.guard.name.search("move_up") >= 0) {
                this.MaxMoveTimes = 60;
                this.moveStepX = 0;
                this.moveStepY = -stepY;
            }
            else if (this.guard.name.search("move_down") >= 0) {
                this.MaxMoveTimes = 60;
                this.moveStepX = 0;
                this.moveStepY = stepY;
            }
        }
    };
    Guard.prototype.onUpdate = function () {
        // check spirte alive
        if (this.guard.destroyed) {
            this.destroy();
            return;
        }
        /** 平移 */
        if (this.guard.name.search("move") >= 0) {
            // update
            this.moveTimes = (this.moveTimes + 1) % (this.MaxMoveTimes * 2);
            this.flag_move = Math.floor((this.moveTimes / this.MaxMoveTimes) % 2) > 0;
            if (this.flag_move) {
                this.guard.transform.localPositionX += this.moveStepX;
                this.guard.transform.localPositionY += this.moveStepY;
            }
            else {
                this.guard.transform.localPositionX -= this.moveStepX;
                this.guard.transform.localPositionY -= this.moveStepY;
            }
        }
        /** 旋转 */
        else if (this.guard.name.search("rotate_left") >= 0) {
            this.guard.transform.localRotationEulerY = (this.guard.transform.localRotationEulerY + 1) % 360;
        }
        else if (this.guard.name.search("rotate_right") >= 0) {
            this.guard.transform.localRotationEulerY = (this.guard.transform.localRotationEulerY - 1) % 360;
        }
        else if (this.guard.name.search("rotate_up") >= 0) {
            this.guard.transform.localRotationEulerX = (this.guard.transform.localRotationEulerX + 1) % 360;
        }
        else if (this.guard.name.search("rotate_down") >= 0) {
            this.guard.transform.localRotationEulerX = (this.guard.transform.localRotationEulerX - 1) % 360;
        }
    };
    return Guard;
}(Laya.Script3D));
exports.default = Guard;
},{"../Const":3}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Const = require("../Const");
var GameScene_1 = require("../runtime/GameScene");
var Bullet_1 = require("../component/Bullet");
var Target = /** @class */ (function (_super) {
    __extends(Target, _super);
    function Target() {
        var _this = _super.call(this) || this;
        _this.type = 0 /* DEFAULT */;
        _this.collisionBlackList = ["stand", "Guard", "bomb"];
        /** target object pieces */
        _this.piecesList = [];
        return _this;
    }
    Target.prototype.onAwake = function () {
        var _this = this;
        this.target = this.owner;
        this.setRigidbody();
        // 延后几帧屏蔽物理受力，以等待物体掉落放置
        Laya.timer.frameOnce(Const.SetKinematicWaitTime, this, function () {
            if (!GameScene_1.default.instance.isStageStart) {
                _this.rigidbody.isKinematic = true;
            }
        });
        this.initPieces();
    };
    /** collision enter */
    Target.prototype.onCollisionEnter = function (collision) {
        this.collisionHandler(collision);
    };
    /** collision stay */
    Target.prototype.onCollisionStay = function (collision) {
        this.collisionHandler(collision);
    };
    /** collision exit */
    Target.prototype.onCollisionExit = function (collision) {
        this.collisionHandler(collision);
    };
    /** collision handler */
    Target.prototype.collisionHandler = function (collision) {
        var _this = this;
        var other = collision.other.owner;
        // check collision in black list: stand, guard
        var inBlackList = false;
        for (var _i = 0, _a = this.collisionBlackList; _i < _a.length; _i++) {
            var item = _a[_i];
            if (other.name.indexOf(item) >= 0) {
                inBlackList = true;
                break;
            }
        }
        // reset win check
        if (inBlackList) {
            GameScene_1.default.instance.winCheckCnt = 0;
        }
        /** 子弹效果处理 */
        if (other.name === "bullet") {
            var bullet = other.getComponent(Bullet_1.default);
            if (bullet.type === 1 /* FROZEN */ && this.type !== 1 /* GLASS */) {
                this.setType(1 /* GLASS */);
            }
        }
        /** TNT炸弹冲击波处理 */
        if (other.name === "bomb") {
            var velocity = new Laya.Vector3();
            // console.log(this.target.transform.localPosition);
            // console.log(other.transform.localPosition);
            Laya.Vector3.subtract(this.target.transform.position, other.transform.position, velocity);
            Laya.Vector3.normalize(velocity, velocity);
            Laya.Vector3.scale(velocity, 3 / other.transform.localScaleX, velocity);
            Laya.Vector3.add(this.rigidbody.linearVelocity, velocity, velocity);
            this.rigidbody.linearVelocity = velocity;
        }
        /** 本体受击打处理 */
        // Glass
        if (this.type === 1 /* GLASS */) {
            // 相对速度高可击碎
            var velocity = this.rigidbody.linearVelocity.clone();
            var velocityOther = new Laya.Vector3(0, 0, 0);
            // not stand and guard
            if (!inBlackList) {
                velocityOther = other.getComponent(Laya.Rigidbody3D).linearVelocity.clone();
            }
            var velocityValue = Laya.Vector3.distance(velocity, velocityOther);
            if (velocityValue >= Const.GlassBrokenVelocity || other.name.indexOf("bomb") >= 0) {
                // this.isHit = true;
                this.broken();
            }
        }
        // TNT
        else if (this.type === 2 /* TNT */) {
            // hit by bullet => bomb
            if ((other.name.indexOf("bullet") >= 0 || other.name.indexOf("bomb") >= 0) && this.target.parent) {
                var bombRadius = this.sizeX / 2 * this.target.transform.localScaleX * 1;
                var bomb_1 = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(bombRadius));
                this.target.parent.addChild(bomb_1);
                bomb_1.name = ("bomb");
                // set rigidbody
                var collider = bomb_1.addComponent(Laya.PhysicsCollider);
                collider.colliderShape = new Laya.SphereColliderShape(bombRadius);
                collider.isTrigger = true;
                // 设置碰撞组，避免像玻璃碎片之类过多数量碰撞爆内存
                collider.canCollideWith = 1;
                // set transform
                bomb_1.transform.localPosition = this.target.transform.localPosition.clone();
                bomb_1.transform.localScale = this.target.transform.localScale.clone();
                // set material
                var mat = new Laya.UnlitMaterial();
                bomb_1.meshRenderer.material = mat;
                mat.renderMode = Laya.UnlitMaterial.RENDERMODE_TRANSPARENT;
                mat.albedoColor = new Laya.Vector4(1, 0.5, 0, 0.2);
                // 1帧后从场景中移除本体
                Laya.timer.frameOnce(1, this, function () {
                    _this.target.removeSelf();
                });
                // n帧后销毁隐形炸弹
                var cnt_1 = 0;
                bomb_1.timer.frameLoop(1, bomb_1, function () {
                    if (cnt_1++ > 15) {
                        bomb_1.timer.clearAll(bomb_1);
                        bomb_1.destroy();
                        _this.target.destroy();
                        _this.destroy();
                        return;
                    }
                    bomb_1.transform.localScaleX *= 1.2;
                    bomb_1.transform.localScaleY *= 1.2;
                    bomb_1.transform.localScaleZ *= 1.2;
                });
            }
        }
    };
    Target.prototype.onUpdate = function () {
        // check spirte alive
        if (this.target.destroyed) {
            this.destroy();
            return;
        }
        // stage start
        if (this.rigidbody.isKinematic && GameScene_1.default.instance.isStageStart) {
            this.rigidbody.isKinematic = false;
        }
        // 刷新渲染模式，不然临近设置成透明渲染的物体会被遮盖
        this.refreshRenderMode();
        /** win check
         *  引擎bug：物体架在两个平台夹缝上时，不触发onCollisionStay,
         *  故完善关卡胜利判断，根据物体与关卡模型中心距离判定是否掉出平台
         *  ps：物理引擎bug较多，可以来引擎呈现物理宏观效果，但尽量少依赖碰撞做需要稳定的底层处理
         */
        this.distance = Laya.Vector3.distance(this.target.transform.position, GameScene_1.default.instance.gameStage.transform.position);
        if (this.distance < 20) {
            // reset win check counter
            GameScene_1.default.instance.winCheckCnt = 0;
        }
        /** physics engine bug detecting and fixing
         *  引擎bug：姿态稳定情况下，某个物体作用力方向（如重力时的底下）的碰撞物体快速消失，
         *  而此过程中相互作用影响过小导致自身姿态没有变化时，引擎会自动将该物体的刚体非激活，从而导致腾空现象，
         *  增大物体间相互作用力（如摩擦系数）可减少该情况发生，但不能杜绝，
         *  故在此检测该情况并对刚体销毁重建
         * */
        if (this.rigidbody && this.rigidbody.isActive == false) {
            console.log("Physics_engine_bug_fixing: Reset rigidbody.");
            this.refreshRigidbody();
        }
    };
    /** refresh render mode of material */
    Target.prototype.refreshRenderMode = function () {
        if (this.type === 1 /* GLASS */) {
            this.material.renderMode = Laya.PBRSpecularMaterial.RENDERMODE_TRANSPARENT;
        }
        else {
            this.material.renderMode = Laya.PBRSpecularMaterial.RENDERMODE_OPAQUE;
        }
    };
    /** destroy and recreate rigidbody */
    Target.prototype.refreshRigidbody = function () {
        if (this.rigidbody) {
            console.log("refresh rigidbody");
            this.rigidbody.destroy();
            this.setRigidbody();
        }
    };
    /** set material by type */
    Target.prototype.setType = function (type) {
        this.type = type;
        // get material
        this.material = this.target.meshRenderer.material;
        if (!this.material) {
            this.material = new Laya.PBRSpecularMaterial();
            this.target.meshRenderer.material = this.material;
        }
        // set material by type
        if (this.type === 0 /* DEFAULT */) {
            this.material.albedoTexture = Laya.loader.getRes(Const.StageTexUrl[1]);
            this.material.specularColor = new Laya.Vector4(0, 0, 0, 1);
            this.material.enableEmission = true;
            this.material.emissionColor = new Laya.Vector4(0.1, 0.1, 0.1, 1);
        }
        else if (this.type === 1 /* GLASS */) {
            this.material.albedoTexture = null;
            this.material.albedoColor = new Laya.Vector4(0.7, 0.7, 1, 0.7);
            this.material.specularColor = new Laya.Vector4(0, 0, 0, 1);
            this.material.enableEmission = true;
            this.material.emissionColor = new Laya.Vector4(0.2, 0.2, 0.2, 1);
        }
        else if (this.type === 2 /* TNT */) {
            this.material.albedoTexture = Laya.loader.getRes(Const.StageTexUrl[2]);
            this.material.specularColor = new Laya.Vector4(0, 0, 0, 1);
            this.material.enableEmission = true;
            this.material.emissionColor = new Laya.Vector4(0.1, 0.1, 0.1, 1);
        }
        this.refreshRenderMode();
    };
    /** set rigidbody */
    Target.prototype.setRigidbody = function () {
        // get size of bounding box
        var boundingBox = this.target.meshFilter.sharedMesh.boundingBox.clone();
        this.sizeX = boundingBox.max.x - boundingBox.min.x;
        this.sizeY = boundingBox.max.y - boundingBox.min.y;
        this.sizeZ = boundingBox.max.z - boundingBox.min.z;
        // add rigidbody
        this.rigidbody = this.target.addComponent(Laya.Rigidbody3D);
        if (this.target.name.search("Cube") >= 0) {
            this.rigidbody.colliderShape = new Laya.BoxColliderShape(this.sizeX, this.sizeY, this.sizeZ);
        }
        else if (this.target.name.search("Cylinder") >= 0) {
            this.rigidbody.colliderShape = new Laya.CylinderColliderShape(this.sizeX / 2, this.sizeY);
        }
        else {
            var colliderShape = new Laya.MeshColliderShape();
            colliderShape.mesh = this.target.meshFilter.sharedMesh;
            this.rigidbody.colliderShape = colliderShape;
        }
        this.setPhysicsParam();
    };
    /** set physics param */
    Target.prototype.setPhysicsParam = function () {
        this.rigidbody.isKinematic = false;
        if (this.type === 0 /* DEFAULT */) {
            this.rigidbody.mass = 10;
            this.rigidbody.friction = 10;
        }
        else if (this.type === 1 /* GLASS */) {
            this.rigidbody.mass = 0.1;
            this.rigidbody.friction = 2;
        }
    };
    /** set target broken */
    Target.prototype.broken = function () {
        // play broken sound
        var _this = this;
        // show pieces
        this.effectPiecesBroken();
        // hide target
        Laya.timer.frameOnce(1, this, function () {
            _this.target.active = false;
        });
    };
    /** init target pieces */
    Target.prototype.initPieces = function () {
        var _this = this;
        Laya.Mesh.load(Const.PieceResUrl, Laya.Handler.create(this, function (mesh) {
            var piece = new Laya.MeshSprite3D(mesh);
            piece.active = false;
            piece.name = "piece";
            // set material
            var mat = new Laya.PBRSpecularMaterial();
            mat.renderMode = Laya.PBRSpecularMaterial.RENDERMODE_TRANSPARENT;
            mat.albedoTexture = null;
            mat.albedoColor = new Laya.Vector4(0.7, 0.7, 1, 0.7);
            mat.specularColor = new Laya.Vector4(0, 0, 0, 1);
            mat.enableEmission = true;
            mat.emissionColor = new Laya.Vector4(0.2, 0.2, 0.2, 1);
            piece.meshRenderer.material = mat;
            // set rigidbody
            var pieceRigid = piece.addComponent(Laya.Rigidbody3D);
            var pieceColliderShape = new Laya.MeshColliderShape();
            pieceColliderShape.mesh = piece.meshFilter.sharedMesh;
            pieceRigid.colliderShape = pieceColliderShape;
            pieceRigid.collisionGroup = 2;
            // add pieces to scene
            for (var i = 0; i < Const.PiecesNum; i++) {
                _this.piecesList.push(piece.clone());
                GameScene_1.default.instance.scene3D.addChild(_this.piecesList[i]);
            }
        }));
    };
    /** platy effect: target broken to pieces */
    Target.prototype.effectPiecesBroken = function () {
        var _this = this;
        var _loop_1 = function (idx) {
            // active pieces
            this_1.piecesList[idx].active = true;
            // set size scale
            var scaleX = (Math.random() * 0.5 + 0.5) * 1.5 * this_1.sizeX * this_1.target.transform.localScaleX * Const.StageInitScale.x;
            var scaleY = (Math.random() * 0.5 + 0.5) * 1.5 * this_1.sizeY * this_1.target.transform.localScaleY * Const.StageInitScale.y;
            var scaleZ = (Math.random() * 0.5 + 0.5) * 1.5 * this_1.sizeZ * this_1.target.transform.localScaleZ * Const.StageInitScale.z;
            this_1.piecesList[idx].transform.localScale = new Laya.Vector3(scaleX, scaleY, scaleZ);
            // set rot
            this_1.piecesList[idx].transform.localRotationEulerX = (Math.random() - 0.5) * 2 * 90;
            this_1.piecesList[idx].transform.localRotationEulerY = (Math.random() - 0.5) * 2 * 90;
            this_1.piecesList[idx].transform.localRotationEulerZ = (Math.random() - 0.5) * 2 * 90;
            // set pos
            var velocity = new Laya.Vector3();
            velocity.x = (Math.random() - 0.5) * Const.StageInitScale.x / 80;
            velocity.y = (Math.random() - 0.5) * Const.StageInitScale.y / 80;
            velocity.z = (Math.random() - 0.5) * Const.StageInitScale.z / 80;
            this_1.piecesList[idx].transform.position = this_1.target.transform.position.clone();
            Laya.Vector3.add(this_1.piecesList[idx].transform.localPosition, velocity, this_1.piecesList[idx].transform.localPosition);
            // set velocity of pieces
            Laya.Vector3.scale(velocity, 50, velocity);
            Laya.Vector3.add(velocity, this_1.rigidbody.linearVelocity, velocity);
            this_1.piecesList[idx].getComponent(Laya.Rigidbody3D).linearVelocity = velocity.clone();
            // set hiding effect
            Laya.Tween.to(this_1.piecesList[idx].transform.localScale, { x: scaleX / 2, y: scaleY / 2, z: scaleZ / 2 }, Const.PiecesBrokenTime / 60 * 1000, Laya.Ease.linearNone);
            Laya.Tween.to(this_1.piecesList[idx].meshRenderer.material, { albedoColorA: 0 }, Const.PiecesBrokenTime / 60 * 1000, Laya.Ease.linearNone, Laya.Handler.create(this_1, function () {
                _this.piecesList[+idx].destroy();
            }));
        };
        var this_1 = this;
        for (var idx in this.piecesList) {
            _loop_1(idx);
        }
    };
    return Target;
}(Laya.Script3D));
exports.default = Target;
},{"../Const":3,"../component/Bullet":4,"../runtime/GameScene":7}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../../ui/layaMaxUI");
var Const = require("../Const");
var Bullet_1 = require("../component/Bullet");
var Target_1 = require("../component/Target");
var Guard_1 = require("../component/Guard");
var GameScene = /** @class */ (function (_super) {
    __extends(GameScene, _super);
    function GameScene() {
        var _this = _super.call(this) || this;
        _this.bgIdx = 0;
        _this.MaxBulletNum = 100;
        _this.currBulletNum = 0;
        _this.winCheckCnt = 0;
        _this.isStageStart = false;
        /** cannon */
        _this.cannonType = 0 /* DEFAULT */;
        _this.isRecoil = false;
        _this.MaxRecoilTime = 8;
        _this.bulletDirection = new Laya.Vector3();
        /** raycast */
        _this.mousePoint = new Laya.Vector2();
        _this.ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));
        _this.hitResult = new Laya.HitResult();
        /** game state */
        _this.state = 0;
        GameScene.instance = _this;
        _this.initScene3D();
        _this.initCannon();
        _this.initBullet();
        // load texture
        Laya.loader.load(Const.StageTexUrl, Laya.Handler.create(_this, function () {
            _this.stageIdx = 1;
            _this.loadGameStage();
        }));
        return _this;
    }
    /**
     * 打开该单例页面，触发onOpened
     * @param param  onOpened方法的传参
     */
    GameScene.openInstance = function (param) {
        if (GameScene.instance) {
            GameScene.instance.onOpened(param);
            // GameScene.instance.showTutorial();
        }
        else {
            Laya.Scene.open(Const.URL_GameScene, false, param);
        }
    };
    GameScene.prototype.onOpened = function (param) {
        this.visible = true;
        // this.state = Const.GameState.READY;
    };
    /** initialize scene */
    GameScene.prototype.initScene3D = function () {
        var _this = this;
        // add scene
        this.scene3D = this.scene3DBox.addChild(new Laya.Scene3D());
        // camera
        this.camera = this.scene3D.addChild(new Laya.Camera());
        this.camera.transform.localPosition = Const.CameraInitPos.clone();
        this.camera.transform.localRotationEuler = Const.CameraInitRotEuler.clone();
        this.camera.clearColor = null;
        // direction light
        this.directionLight = this.scene3D.addChild(new Laya.DirectionLight());
        this.directionLight.transform.localPosition = Const.LightInitPos.clone();
        this.directionLight.transform.localRotationEuler = Const.LightInitRotEuler.clone();
        this.directionLight.color = Const.LightInitColor.clone();
        // background
        Laya.Sprite3D.load(Const.BgResUrl[this.bgIdx], Laya.Handler.create(this, function (res) {
            _this.background = _this.scene3D.addChild(res);
            // transform
            _this.background.transform.localPosition = Const.StageInitPos.clone();
            // sceneSp.transform.localPositionZ -= 3;
            _this.background.transform.localRotationEuler = Const.StageInitRot.clone();
            _this.background.transform.localScale = Const.StageInitScale.clone();
            // destroy animator component
            var bgAni = _this.background.getComponent(Laya.Animator);
            bgAni && bgAni.destroy();
            if (_this.bgIdx === 0) {
                _this.cloud0 = _this.background.getChildByName("Scenes_02").getChildByName("cloud01");
                _this.cloud1 = _this.background.getChildByName("Scenes_02").getChildByName("cloud03");
            }
        }));
    };
    /** initialize player */
    GameScene.prototype.initCannon = function () {
        var _this = this;
        Laya.Sprite3D.load(Const.CannonResUrl[0], Laya.Handler.create(this, function (res) {
            _this.cannon = res;
            _this.scene3D.addChild(_this.cannon);
            _this.cannon.name = "player";
            _this.cannon.transform.localPosition = Const.CannonInitPos.clone();
            _this.cannon.transform.localRotationEuler = Const.CannonInitRot.clone();
            _this.cannon.transform.localScale = Const.CannonInitScale.clone();
            _this.turret = _this.cannon.getChildByName("Turret_0");
            _this.turretInitPos = _this.turret.transform.position.clone();
        }));
    };
    /** init bullet */
    GameScene.prototype.initBullet = function () {
        var radius = Const.BulletRadius;
        this._bullet = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(radius));
        this._bullet.name = "_bullet";
        // add rigidbody
        var bulletRigid = this._bullet.addComponent(Laya.Rigidbody3D);
        bulletRigid.colliderShape = new Laya.SphereColliderShape(radius);
    };
    /** load game stage by index */
    GameScene.prototype.loadGameStage = function () {
        var _this = this;
        // destroy old stage
        if (this.gameStage) {
            this.gameStage.destroyChildren();
            this.gameStage.destroy();
            Laya.stage.off(Laya.Event.CLICK, this, this.onClick);
        }
        // reset
        this.currBulletNum = 0;
        this.winCheckCnt = 0;
        this.isStageStart = false;
        this.isRecoil = false;
        this.recoilTime = this.MaxRecoilTime;
        // load stage
        var satgeResUrl = Const.StageResUrl + this.stageIdx + ".lh";
        Laya.Sprite3D.load(satgeResUrl, Laya.Handler.create(this, function (res) {
            _this.gameStage = _this.scene3D.addChild(res);
            // transform
            _this.gameStage.transform.localPosition = Const.StageInitPos.clone();
            _this.gameStage.transform.localRotationEuler = Const.StageInitRot.clone();
            _this.gameStage.transform.localScale = Const.StageInitScale.clone();
            // destroy animator component: 不然会约束物理碰撞效果
            var stageAni = _this.gameStage.getComponent(Laya.Animator);
            stageAni && stageAni.destroy();
            var child;
            for (var i = 0; i < _this.gameStage.numChildren; i++) {
                child = _this.gameStage.getChildAt(i);
                // 关闭阴影
                child.meshRenderer.castShadow = false;
                /** target object */
                if (child.name.search("Obstacle") >= 0) {
                    // console.log(child.name + " to target")
                    // add scipt
                    var targetScript = child.addComponent(Target_1.default);
                    // set type
                    if (child.name.search("Glass") >= 0) {
                        targetScript.setType(1 /* GLASS */);
                    }
                    else if (child.name.search("TNT") >= 0) {
                        targetScript.setType(2 /* TNT */);
                    }
                    else {
                        targetScript.setType(0 /* DEFAULT */);
                    }
                }
                /** stand_box */
                else if (child.name.search("Cube") >= 0) {
                    // console.log(child.name + " to stand")
                    child.name = "stand";
                    // add collider
                    var collider = child.addComponent(Laya.PhysicsCollider);
                    var boundingBox = child.meshFilter.sharedMesh.boundingBox.clone();
                    var sizeX = boundingBox.max.x - boundingBox.min.x;
                    var sizeY = boundingBox.max.y - boundingBox.min.y;
                    var sizeZ = boundingBox.max.z - boundingBox.min.z;
                    collider.colliderShape = new Laya.BoxColliderShape(sizeX, sizeY, sizeZ);
                    // set material
                    var mat = new Laya.PBRSpecularMaterial();
                    // 刷新渲染模式，不然其上设置成透明渲染的物体会被遮盖
                    mat.renderMode = Laya.PBRSpecularMaterial.RENDERMODE_OPAQUE;
                    mat.albedoTexture = Laya.loader.getRes(Const.StageTexUrl[0]);
                    child.meshRenderer.material = mat;
                }
                /** stand_cylinder */
                else if (child.name.search("Cylinder") >= 0) {
                    // console.log(child.name + " to stand")
                    child.name = "stand";
                    // add collider
                    var collider = child.addComponent(Laya.PhysicsCollider);
                    var colliderShape = new Laya.MeshColliderShape();
                    colliderShape.mesh = child.meshFilter.sharedMesh;
                    collider.colliderShape = colliderShape;
                    // set material
                    var mat = new Laya.PBRSpecularMaterial();
                    // 刷新渲染模式，不然其上设置成透明渲染的物体会被遮盖
                    mat.renderMode = Laya.PBRSpecularMaterial.RENDERMODE_OPAQUE;
                    mat.albedoTexture = Laya.loader.getRes(Const.StageTexUrl[0]);
                    child.meshRenderer.material = mat;
                }
                /** Guard */
                else if (child.name.search("Guard") >= 0) {
                    // console.log(child.name + " to guard")
                    // add script
                    var guard = child.addComponent(Guard_1.default);
                }
                else {
                    child.destroy();
                }
            }
            // set stage listener
            Laya.timer.frameLoop(1, _this, _this.stageLooping);
            // mouse click event listen: shoot a bullet
            Laya.stage.on(Laya.Event.CLICK, _this, _this.onClick);
        }));
    };
    /** game stage looping */
    GameScene.prototype.stageLooping = function () {
        /** win check */
        // player win
        if (this.winCheckCnt++ >= Const.MaxWinCheckTime) {
            console.log("You win. Stage: " + this.stageIdx);
            this.nextStage();
            // clear stage looping
            Laya.timer.clear(this, this.stageLooping);
        }
        // player fail: out of ammo
        else if (this.currBulletNum >= this.MaxBulletNum) {
            console.log("out of ammo");
            this.restart();
            Laya.timer.clear(this, this.stageLooping);
        }
        /** cannon recoil playing */
        if (this.isRecoil) {
            if (this.recoilTime < this.MaxRecoilTime) {
                if (this.recoilTime < this.MaxRecoilTime / 4) {
                    this.turret.transform.localPositionX += this.bulletDirection.x * 0.0005;
                    this.turret.transform.localPositionY += this.bulletDirection.y * 0.0005;
                    this.turret.transform.localPositionZ += this.bulletDirection.z * 0.0005;
                }
                else {
                    this.turret.transform.localPositionX -= this.bulletDirection.x * 0.0003;
                    this.turret.transform.localPositionY -= this.bulletDirection.y * 0.0003;
                    this.turret.transform.localPositionZ -= this.bulletDirection.z * 0.0003;
                }
                this.recoilTime++;
            }
            else {
                this.turret.transform.position = this.turretInitPos.clone();
                this.isRecoil = false;
                this.recoilTime = this.MaxRecoilTime;
            }
        }
        /** background moving */
        this.background && this.bgMoving();
    };
    /** restart current stage */
    GameScene.prototype.restart = function () {
        this.loadGameStage();
    };
    /** start next stage */
    GameScene.prototype.nextStage = function () {
        this.stageIdx++;
        if (this.stageIdx <= Const.StageNum) {
            this.loadGameStage();
        }
        else {
            console.log("通关");
        }
    };
    /** mouse click event: shoot a bullet */
    GameScene.prototype.onClick = function () {
        // check res loading complete
        if (!this.gameStage || !this.cannon || !this._bullet) {
            return;
        }
        // get ray
        this.mousePoint.x = Laya.MouseManager.instance.mouseX;
        this.mousePoint.y = Laya.MouseManager.instance.mouseY;
        this.camera.viewportPointToRay(this.mousePoint, this.ray);
        // get bullet shooting direction
        if (this.scene3D.physicsSimulation.rayCast(this.ray, this.hitResult, 30)) {
            // direction vector: [bullet init point] to [mouse hit point]
            Laya.Vector3.subtract(this.hitResult.point, this.turretInitPos, this.bulletDirection);
        }
        else {
            // direction vector: [camera point] to [mouse hit point]
            var aV3 = new Laya.Vector3();
            // ray direction scale: to depth scaleZ
            var scaleV = this.camera.farPlane;
            scaleV = 20;
            Laya.Vector3.scale(this.ray.direction, scaleV, aV3);
            // direction vector: [bullet init point] to [camera point]
            var bV3 = new Laya.Vector3();
            Laya.Vector3.subtract(this.camera.transform.position, this.turretInitPos, bV3);
            // direction vector: [bullet init point] to [mouse hit point]
            Laya.Vector3.add(aV3, bV3, this.bulletDirection);
        }
        Laya.Vector3.normalize(this.bulletDirection, this.bulletDirection);
        // create bullet
        this.createBullet(0 /* DEFAULT */, this.bulletDirection);
        // set turret transform
        this.turret.transform.localRotationEuler = Const.TurretInitLocalRot.clone();
        this.turret.transform.localRotationEulerX -= this.bulletDirection.y * 90;
        this.turret.transform.localRotationEulerY -= this.bulletDirection.x * 90;
        this.isRecoil = true;
        this.recoilTime = 0;
    };
    /** create bullet */
    GameScene.prototype.createBullet = function (type, direction) {
        this.cannonType = type;
        var bullet = this._bullet.clone();
        bullet.name = "bullet";
        this.scene3D.addChild(bullet);
        // trasform
        bullet.transform.localPosition = this.turretInitPos.clone();
        Laya.Vector3.scale(bullet.transform.localScale, Const.BulletScale[this.cannonType], bullet.transform.localScale);
        // add rigidbody
        var bulletRigid = bullet.getComponent(Laya.Rigidbody3D);
        // quick moving detecion
        bulletRigid.ccdMotionThreshold = 0.001;
        // 半径越小越精准
        bulletRigid.ccdSweptSphereRadius = Const.BulletRadius * Const.BulletScale[this.cannonType] / 1000;
        // set physics
        bulletRigid.mass = Const.BulletMass[this.cannonType];
        // set velocity
        var velocity = direction.clone();
        Laya.Vector3.scale(velocity, Const.BulletVelocity[this.cannonType], velocity);
        bulletRigid.linearVelocity = velocity.clone();
        // add script
        var bulletScript = bullet.addComponent(Bullet_1.default);
        // set type
        bulletScript.type = this.cannonType;
        // 开放物体物理受力：玩家有效输入前，子弹发射轨迹形状检测是否有碰撞
        if (!this.isStageStart) {
            var shape = new Laya.SphereColliderShape(Const.BulletRadius * 3);
            var checkHitResult = [];
            if (this.scene3D.physicsSimulation.shapeCastAll(shape, this.turretInitPos, velocity, checkHitResult)) {
                for (var i in checkHitResult) {
                    if (checkHitResult[i].collider.owner.name !== "stand") {
                        this.isStageStart = true;
                    }
                }
            }
        }
    };
    /** background moving effect */
    GameScene.prototype.bgMoving = function () {
        if (this.bgIdx === 0) {
            if (this.cloud0.transform.localPositionX > 0.5) {
                this.cloud0.transform.localPositionX = -0.5;
            }
            this.cloud0.transform.localPositionX += 0.0007;
            if (this.cloud1.transform.localPositionX < -0.5) {
                this.cloud1.transform.localPositionX = 0.5;
            }
            this.cloud1.transform.localPositionX -= 0.0005;
        }
    };
    return GameScene;
}(layaMaxUI_1.ui.game.GameSceneUI));
exports.default = GameScene;
},{"../Const":3,"../component/Bullet":4,"../component/Guard":5,"../component/Target":6,"./../../ui/layaMaxUI":8}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var View = Laya.View;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var game;
    (function (game) {
        var GameSceneUI = /** @class */ (function (_super) {
            __extends(GameSceneUI, _super);
            function GameSceneUI() {
                return _super.call(this) || this;
            }
            GameSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("game/GameScene");
            };
            return GameSceneUI;
        }(View));
        game.GameSceneUI = GameSceneUI;
        REG("ui.game.GameSceneUI", GameSceneUI);
    })(game = ui.game || (ui.game = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var home;
    (function (home) {
        var HomeViewUI = /** @class */ (function (_super) {
            __extends(HomeViewUI, _super);
            function HomeViewUI() {
                return _super.call(this) || this;
            }
            HomeViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("home/HomeView");
            };
            return HomeViewUI;
        }(View));
        home.HomeViewUI = HomeViewUI;
        REG("ui.home.HomeViewUI", HomeViewUI);
    })(home = ui.home || (ui.home = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var over;
    (function (over) {
        var OverViewUI = /** @class */ (function (_super) {
            __extends(OverViewUI, _super);
            function OverViewUI() {
                return _super.call(this) || this;
            }
            OverViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("over/OverView");
            };
            return OverViewUI;
        }(View));
        over.OverViewUI = OverViewUI;
        REG("ui.over.OverViewUI", OverViewUI);
    })(over = ui.over || (ui.over = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
