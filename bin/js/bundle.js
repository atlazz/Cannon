var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameScene_1 = require("./script/runtime/GameScene");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/runtime/GameScene.ts", GameScene_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "game/GameScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = true;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/runtime/GameScene":8}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** version */
exports.VERSION = "1.0.0";
/** pages */
exports.URL_HomeView = "home/HomeView.scene";
exports.URL_GameScene = "game/GameScene.scene";
exports.URL_OverView = "over/OverView.scene";
exports.URL_ReviveView = "dialog/ReviveView.scene";
/** camera */
exports.CameraInitPos = new Laya.Vector3(0, 0.5, 0);
exports.CameraInitRotEuler = new Laya.Vector3(0, 0, 0);
/** directional light */
exports.LightInitPos = new Laya.Vector3(-3, 5, 0);
exports.LightInitRotEuler = new Laya.Vector3(-45, -30, 0);
/** game stage */
exports.StageResUrl = "res/stage/";
exports.StageInitPos = new Laya.Vector3(0, 0, 0);
exports.StageInitRot = new Laya.Vector3(0, 180, 0);
exports.StageInitScale = new Laya.Vector3(40, 40, 40);
exports.StageNum = 20;
// winning check frame
exports.WinCheckTime = 120;
/** glass */
exports.GlassBrokenVelocity = 3;
/** obstacle piece */
exports.PieceResUrl = "res/cube_piece.lm";
exports.PiecesNum = 3;
exports.PiecesBrokenTime = 120;
/** bullet */
exports.BulletResUrl = "res/bullet.lh";
exports.BulletInitPos = new Laya.Vector3(0, -0.5, -5);
exports.BulletInitRot = new Laya.Vector3(180, 0, 0);
exports.BulletRadius = 0.15;
/** player */
exports.PlayerResUrl = "res/human.lh";
exports.PlayerInitPos = new Laya.Vector3(0, 0, -1);
exports.PlayerInitRot = new Laya.Vector3(90, 168, 0);
exports.PlayerInitScale = new Laya.Vector3(20, 20, 20);
exports.PlayerShootLifeTime = 10;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BulletScript = /** @class */ (function (_super) {
    __extends(BulletScript, _super);
    function BulletScript() {
        var _this = _super.call(this) || this;
        _this.lifetime = 120;
        _this.collisionBlackList = ["bullet", "player"];
        return _this;
    }
    BulletScript.prototype.onAwake = function () {
        this.bullet = this.owner;
    };
    BulletScript.prototype.onUpdate = function () {
        var _this = this;
        // update lifetime
        this.lifetime--;
        if (this.lifetime < 0) {
            Laya.timer.frameOnce(1, this, function () {
                _this.bullet.removeSelf();
                _this.destroy();
            });
        }
    };
    return BulletScript;
}(Laya.Script3D));
exports.default = BulletScript;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameScene_1 = require("../runtime/GameScene");
var Rotator = /** @class */ (function (_super) {
    __extends(Rotator, _super);
    function Rotator() {
        var _this = _super.call(this) || this;
        _this.MaxMoveTimes = 30;
        _this.moveTimes = 0;
        return _this;
    }
    Rotator.prototype.onAwake = function () {
        // record game stage index
        this.stageIdx = GameScene_1.default.instance.stageIdx;
        // get sprite
        this.rotator = this.owner;
        // add collider
        var collider = this.rotator.addComponent(Laya.PhysicsCollider);
        var colliderShape = new Laya.MeshColliderShape();
        colliderShape.mesh = this.rotator.meshFilter.sharedMesh;
        collider.colliderShape = colliderShape;
        // get size
        var boundingBox = this.rotator.meshFilter.sharedMesh.boundingBox.clone();
        this.sizeX = boundingBox.max.x - boundingBox.min.x;
        this.sizeY = boundingBox.max.y - boundingBox.min.y;
        this.sizeZ = boundingBox.max.z - boundingBox.min.z;
        this.sizeX *= 3;
        this.sizeY *= 3;
    };
    Rotator.prototype.setMoveType = function (moveType) {
        this.moveType = moveType;
    };
    Rotator.prototype.onUpdate = function () {
        // check stage
        if (this.stageIdx !== GameScene_1.default.instance.stageIdx) {
            console.log("rotator destroyed.");
            this.destroy();
            return;
        }
        this.moveTimes = (this.moveTimes + 1) % (this.MaxMoveTimes * 2);
        var flag = Math.floor((this.moveTimes / this.MaxMoveTimes) % 2);
        if (this.moveType === "move_left") {
            if (flag) {
                this.rotator.transform.localPositionX -= this.sizeX / this.MaxMoveTimes;
            }
            else {
                this.rotator.transform.localPositionX += this.sizeX / this.MaxMoveTimes;
            }
        }
        else if (this.moveType === "move_right") {
            if (flag) {
                this.rotator.transform.localPositionX += this.sizeX / this.MaxMoveTimes;
            }
            else {
                this.rotator.transform.localPositionX -= this.sizeX / this.MaxMoveTimes;
            }
        }
        else if (this.moveType === "move_up") {
            if (flag) {
                this.rotator.transform.localPositionY += this.sizeY / this.MaxMoveTimes;
            }
            else {
                this.rotator.transform.localPositionY -= this.sizeY / this.MaxMoveTimes;
            }
        }
        else if (this.moveType === "move_down") {
            if (flag) {
                this.rotator.transform.localPositionY -= this.sizeY / this.MaxMoveTimes;
            }
            else {
                this.rotator.transform.localPositionY += this.sizeY / this.MaxMoveTimes;
            }
        }
        // else if (this.moveType === "rotate_left") {
        //     this.rotator.transform.localRotationEulerY = (this.rotator.transform.localRotationEulerY + 1) % 360;
        // }
        // else if (this.moveType === "rotate_right") {
        //     this.rotator.transform.localRotationEulerY = (this.rotator.transform.localRotationEulerY - 1) % 360;
        // }
        // else if (this.moveType === "rotate_up") {
        //     this.rotator.transform.localRotationEulerX = (this.rotator.transform.localRotationEulerX + 1) % 360;
        // }
        // else if (this.moveType === "rotate_down") {
        //     this.rotator.transform.localRotationEulerX = (this.rotator.transform.localRotationEulerX - 1) % 360;
        // }
    };
    return Rotator;
}(Laya.Script3D));
exports.default = Rotator;
},{"../runtime/GameScene":8}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Const = require("../Const");
var GameScene_1 = require("../runtime/GameScene");
var Stand = /** @class */ (function (_super) {
    __extends(Stand, _super);
    function Stand() {
        var _this = _super.call(this) || this;
        _this.winCount = 0;
        _this.collisionBlackList = ["stand", "bullet", "piece"];
        return _this;
    }
    Stand.prototype.onAwake = function () {
        this.stand = this.owner;
    };
    Stand.prototype.onUpdate = function () {
        /** win check */
        this.winCount++;
        if (this.winCount > Const.WinCheckTime) {
            console.log("You win. Stage: " + GameScene_1.default.instance.stageIdx);
            GameScene_1.default.instance.nextStage();
            this.destroy();
        }
    };
    Stand.prototype.onCollisionStay = function (collision) {
        if (this.collisionBlackList.indexOf(collision.other.owner.name) < 0) {
            this.winCount = 0;
        }
    };
    return Stand;
}(Laya.Script3D));
exports.default = Stand;
},{"../Const":3,"../runtime/GameScene":8}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Const = require("../Const");
var GameScene_1 = require("../runtime/GameScene");
var Target = /** @class */ (function (_super) {
    __extends(Target, _super);
    function Target() {
        var _this = _super.call(this) || this;
        _this.type = 1 /* DEFAULT */;
        _this.collisionBlackList = ["stand", "rotator"];
        /** target object pieces */
        _this.piecesList = [];
        return _this;
    }
    Target.prototype.onAwake = function () {
        // record game stage index
        this.stageIdx = GameScene_1.default.instance.stageIdx;
        // get sprite
        this.target = this.owner;
        this.setRigidbody();
        this.initPieces();
    };
    Target.prototype.onCollisionEnter = function (collision) {
        var other = collision.other.owner;
        // if (this.collisionBlackList.indexOf(other.name) < 0) {
        if (this.type === 2 /* GLASS */) {
            // 相对速度高可击碎
            var velocity = this.target.getComponent(Laya.Rigidbody3D).linearVelocity.clone();
            var velocityOther = new Laya.Vector3(0, 0, 0);
            // not playform
            if (this.collisionBlackList.indexOf(other.name) < 0) {
                velocityOther = other.getComponent(Laya.Rigidbody3D).linearVelocity.clone();
            }
            Laya.Vector3.subtract(velocity, velocityOther, velocity);
            var velocityValue = Math.sqrt(Math.pow(velocity.x, 2) + Math.pow(velocity.y, 2) + Math.pow(velocity.z, 2));
            if (velocityValue >= Const.GlassBrokenVelocity) {
                // this.isHit = true;
                this.broken();
            }
        }
        // }
    };
    Target.prototype.onUpdate = function () {
        // check stage
        if (this.stageIdx !== GameScene_1.default.instance.stageIdx) {
            this.destroy();
            return;
        }
        // physics engine bug detecting and fixing
        this.physics_engine_bug_fixing();
        // // hit handling
        // if (this.isHit) {
        //     if (this.type === Const.TargetType.GLASS) {
        //         this.broken();
        //     }
        // }
    };
    /** physics engine bug detecting and fixing
     *  引擎bug：姿态稳定情况下，某个物体作用力方向（如重力时的底下）的碰撞物体快速消失，
     *  而此过程中相互作用影响过小导致自身姿态没有变化时，引擎会自动将该物体的刚体非激活，从而导致腾空现象，
     *  增大物体间相互作用力（如摩擦系数）可减少该情况发生，但不能杜绝，
     *  故在此检测该情况并对刚体销毁重建
     * */
    Target.prototype.physics_engine_bug_fixing = function () {
        var rigidbody = this.target.getComponent(Laya.Rigidbody3D);
        if (rigidbody.isActive == false) {
            rigidbody.destroy();
            this.setRigidbody();
            console.log("Physics_engine_bug_fixing: Reset rigidbody.");
        }
    };
    /** set material by type */
    Target.prototype.setType = function (type) {
        this.type = type;
        if (this.type === 2 /* GLASS */) {
            var mat = new Laya.BlinnPhongMaterial();
            mat.renderMode = Laya.BlinnPhongMaterial.RENDERMODE_TRANSPARENT;
            mat.albedoColor = new Laya.Vector4(0.7, 0.7, 1, 0.7);
            this.target.meshRenderer.material = mat;
        }
    };
    /** set rigidbody */
    Target.prototype.setRigidbody = function () {
        var rigidbody = this.target.addComponent(Laya.Rigidbody3D);
        if (this.target.name.search("Cube") >= 0) {
            var boundingBox = this.target.meshFilter.sharedMesh.boundingBox.clone();
            this.sizeX = boundingBox.max.x - boundingBox.min.x;
            this.sizeY = boundingBox.max.y - boundingBox.min.y;
            this.sizeZ = boundingBox.max.z - boundingBox.min.z;
            rigidbody.colliderShape = new Laya.BoxColliderShape(this.sizeX, this.sizeY, this.sizeZ);
        }
        else {
            var colliderShape = new Laya.MeshColliderShape();
            colliderShape.mesh = this.target.meshFilter.sharedMesh;
            rigidbody.colliderShape = colliderShape;
        }
        this.setPhysicsParam();
    };
    /** set physics param */
    Target.prototype.setPhysicsParam = function () {
        var rigidbody = this.target.getComponent(Laya.Rigidbody3D);
        rigidbody.isKinematic = false;
        if (this.type === 1 /* DEFAULT */) {
            rigidbody.mass = 10;
            rigidbody.friction = 10;
        }
        else if (this.type === 2 /* GLASS */) {
            rigidbody.mass = 0.1;
            rigidbody.friction = 2;
        }
    };
    /** set target broken */
    Target.prototype.broken = function () {
        // play broken sound
        var _this = this;
        // show pieces
        this.effectPiecesBroken();
        // hide target
        Laya.timer.frameOnce(1, this, function () {
            _this.target.active = false;
        });
    };
    /** init target pieces */
    Target.prototype.initPieces = function () {
        var _this = this;
        Laya.Mesh.load(Const.PieceResUrl, Laya.Handler.create(this, function (mesh) {
            var piece = new Laya.MeshSprite3D(mesh);
            piece.active = false;
            piece.name = "piece";
            // set material
            var mat = new Laya.BlinnPhongMaterial();
            mat.renderMode = Laya.BlinnPhongMaterial.RENDERMODE_TRANSPARENT;
            mat.albedoColor = new Laya.Vector4(0.7, 0.7, 1, 0.7);
            piece.meshRenderer.material = mat;
            // set rigidbody
            var pieceRigid = piece.addComponent(Laya.Rigidbody3D);
            var pieceColliderShape = new Laya.MeshColliderShape();
            pieceColliderShape.mesh = piece.meshFilter.sharedMesh;
            pieceRigid.colliderShape = pieceColliderShape;
            // add pieces to scene
            for (var i = 0; i < Const.PiecesNum; i++) {
                _this.piecesList.push(piece.clone());
                GameScene_1.default.instance.scene3D.addChild(_this.piecesList[i]);
            }
        }));
    };
    /** platy effect: target broken to pieces */
    Target.prototype.effectPiecesBroken = function () {
        var _this = this;
        var _loop_1 = function (idx) {
            // active pieces
            this_1.piecesList[idx].active = true;
            // set size scale
            var scaleX = (Math.random() * 0.5 + 0.5) * 2.5 * this_1.sizeX * Const.StageInitScale.x;
            var scaleY = (Math.random() * 0.5 + 0.5) * 2.5 * this_1.sizeY * Const.StageInitScale.y;
            var scaleZ = (Math.random() * 0.5 + 0.5) * 2.5 * this_1.sizeZ * Const.StageInitScale.z;
            this_1.piecesList[idx].transform.localScale = new Laya.Vector3(scaleX, scaleY, scaleZ);
            // set rot
            this_1.piecesList[idx].transform.localRotationEulerX = (Math.random() - 0.5) * 2 * 90;
            this_1.piecesList[idx].transform.localRotationEulerY = (Math.random() - 0.5) * 2 * 90;
            this_1.piecesList[idx].transform.localRotationEulerZ = (Math.random() - 0.5) * 2 * 90;
            // set pos
            var velocity = new Laya.Vector3();
            velocity.x = (Math.random() - 0.5) * Const.BulletRadius;
            velocity.y = (Math.random() - 0.5) * Const.BulletRadius;
            velocity.z = (Math.random() - 0.5) * Const.BulletRadius;
            this_1.piecesList[idx].transform.position = this_1.target.transform.position.clone();
            Laya.Vector3.add(this_1.piecesList[idx].transform.localPosition, velocity, this_1.piecesList[idx].transform.localPosition);
            // set velocity of pieces
            Laya.Vector3.scale(velocity, 50, velocity);
            this_1.piecesList[idx].getComponent(Laya.Rigidbody3D).linearVelocity = velocity.clone();
            // set hiding effect
            Laya.Tween.to(this_1.piecesList[idx].transform.localScale, { x: scaleX / 2, y: scaleY / 2, z: scaleZ / 2 }, Const.PiecesBrokenTime / 60 * 1000, Laya.Ease.linearNone);
            Laya.Tween.to(this_1.piecesList[idx].meshRenderer.material, { albedoColorA: 0 }, Const.PiecesBrokenTime / 60 * 1000, Laya.Ease.linearNone, Laya.Handler.create(this_1, function () {
                _this.piecesList[+idx].destroy();
            }));
        };
        var this_1 = this;
        for (var idx in this.piecesList) {
            _loop_1(idx);
        }
    };
    return Target;
}(Laya.Script3D));
exports.default = Target;
},{"../Const":3,"../runtime/GameScene":8}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../../ui/layaMaxUI");
var Const = require("../Const");
var Bullet_1 = require("../component/Bullet");
var Stand_1 = require("../component/Stand");
var Target_1 = require("../component/Target");
var Rotator_1 = require("../component/Rotator");
var GameScene = /** @class */ (function (_super) {
    __extends(GameScene, _super);
    function GameScene() {
        var _this = _super.call(this) || this;
        _this.MaxBulletNum = 5;
        _this.currBulletNum = 0;
        _this.bulletRadius = 0.02;
        _this.bulletVelocity = 1;
        _this.bulletDirection = new Laya.Vector3();
        _this.shootTime = -1;
        /** raycast */
        _this.mousePoint = new Laya.Vector2();
        _this.ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));
        _this.hitResult = new Laya.HitResult();
        /** game state */
        _this.state = 0;
        GameScene.instance = _this;
        _this.initScene3D();
        _this.initPlayer();
        _this.initBullet();
        _this.stageIdx = 9;
        _this.loadGameStage();
        // mouse click event listen: shoot a bullet
        Laya.stage.on(Laya.Event.CLICK, _this, _this.onClick);
        return _this;
    }
    /**
     * 打开该单例页面，触发onOpened
     * @param param  onOpened方法的传参
     */
    GameScene.openInstance = function (param) {
        if (GameScene.instance) {
            GameScene.instance.onOpened(param);
            // GameScene.instance.showTutorial();
        }
        else {
            Laya.Scene.open(Const.URL_GameScene, false, param);
        }
    };
    GameScene.prototype.onOpened = function (param) {
        this.visible = true;
        // this.state = Const.GameState.READY;
    };
    ;
    /** initialize scene */
    GameScene.prototype.initScene3D = function () {
        // add scene
        this.scene3D = Laya.stage.addChild(new Laya.Scene3D());
        // camera
        this.camera = this.scene3D.addChild(new Laya.Camera());
        this.camera.transform.localPosition = Const.CameraInitPos.clone();
        this.camera.transform.localRotationEuler = Const.CameraInitRotEuler.clone();
        // direction light
        this.directionLight = this.scene3D.addChild(new Laya.DirectionLight());
        this.directionLight.transform.localPosition = Const.LightInitPos.clone();
        this.directionLight.transform.localRotationEuler = Const.LightInitRotEuler.clone();
    };
    /** initialize player */
    GameScene.prototype.initPlayer = function () {
        var _this = this;
        Laya.Sprite3D.load(Const.PlayerResUrl, Laya.Handler.create(this, function (res) {
            _this.player = res;
            _this.scene3D.addChild(_this.player);
            _this.playerAni = _this.player.getComponent(Laya.Animator);
            _this.player.transform.localPosition = Const.PlayerInitPos.clone();
            _this.player.transform.localRotationEuler = Const.PlayerInitRot.clone();
            _this.player.transform.localScale = Const.PlayerInitScale.clone();
            _this.player.name = "player";
            var shadowMat = _this.player.getChildByName("shadow_0").meshRenderer.material;
            shadowMat.renderMode = Laya.BlinnPhongMaterial.RENDERMODE_TRANSPARENT;
            shadowMat.albedoColorA = 0.2;
            // set shooting animation
            _this.playerAni.getDefaultState().clip.islooping = true;
            _this.playerAni.play();
            Laya.timer.frameLoop(1, _this, function () {
                // play shooting animation
                _this.shootTime--;
                if (_this.shootTime < 0) {
                    // stop playing
                    _this.playerAni.speed = 0;
                }
            });
        }));
    };
    /** initialize bullet */
    GameScene.prototype.initBullet = function () {
        this._bullet = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(Const.BulletRadius));
        /** add rigidbody */
        var bulletRigid = this._bullet.addComponent(Laya.Rigidbody3D);
        bulletRigid.colliderShape = new Laya.SphereColliderShape(Const.BulletRadius);
        /** set physics */
        bulletRigid.mass = 10;
        bulletRigid.overrideGravity = true;
        bulletRigid.gravity = new Laya.Vector3(0, -5, 0);
        // quick moving detecion
        bulletRigid.ccdMotionThreshold = 0.0001;
        bulletRigid.ccdSweptSphereRadius = Const.BulletRadius;
        /** trasform */
        this._bullet.transform.localPosition = Const.BulletInitPos.clone();
        this._bullet.transform.localRotationEuler = Const.BulletInitRot.clone();
        this._bullet.name = "_bullet";
    };
    /** restart current stage */
    GameScene.prototype.restart = function () {
        this.loadGameStage();
    };
    /** start next stage */
    GameScene.prototype.nextStage = function () {
        this.stageIdx++;
        if (this.stageIdx <= Const.StageNum) {
            this.loadGameStage();
        }
        else {
            console.log("通关");
        }
    };
    /** load game stage by index */
    GameScene.prototype.loadGameStage = function () {
        var _this = this;
        // reset
        this.gameStage && this.gameStage.destroyChildren();
        this.gameStage && this.gameStage.destroy();
        this.currBulletNum = 0;
        // load stage
        var satgeResUrl = Const.StageResUrl + this.stageIdx + ".lh";
        Laya.Sprite3D.load(satgeResUrl, Laya.Handler.create(this, function (res) {
            _this.gameStage = _this.scene3D.addChild(res);
            // set pos
            _this.gameStage.transform.localPosition = Const.StageInitPos.clone();
            _this.gameStage.transform.localRotationEuler = Const.StageInitRot.clone();
            _this.gameStage.transform.localScale = Const.StageInitScale.clone();
            // destroy animator component: 不然会约束物理碰撞效果
            _this.gameStage.getComponent(Laya.Animator).destroy();
            var child;
            for (var i = 0; i < _this.gameStage.numChildren; i++) {
                child = _this.gameStage.getChildAt(i);
                /** target object */
                if (child.name.search("Obstacle") >= 0) {
                    console.log(child.name + " to target");
                    // add scipt
                    var targetScript = child.addComponent(Target_1.default);
                    // set type
                    if (child.name.search("CubeGlass") >= 0) {
                        targetScript.setType(2 /* GLASS */);
                    }
                    else {
                        targetScript.setType(1 /* DEFAULT */);
                    }
                }
                /** stand_box */
                else if (child.name.search("Cube") >= 0) {
                    console.log(child.name + " to stand");
                    child.name = "stand";
                    // add collider
                    var rigid = child.addComponent(Laya.PhysicsCollider);
                    var boundingBox = child.meshFilter.sharedMesh.boundingBox.clone();
                    var sizeX = boundingBox.max.x - boundingBox.min.x;
                    var sizeY = boundingBox.max.y - boundingBox.min.y;
                    var sizeZ = boundingBox.max.z - boundingBox.min.z;
                    rigid.colliderShape = new Laya.BoxColliderShape(sizeX, sizeY, sizeZ);
                    // add script
                    // 获取台子boundbox，添加脚本，需要兼容多个平台时胜利判断, & mesh collider shape碰撞抖动问题 todo <=======================
                    child.addComponent(Stand_1.default);
                }
                /** stand_cylinder */
                else if (child.name.search("Cylinder") >= 0) {
                    console.log(child.name + " to stand");
                    child.name = "stand";
                    // add collider
                    var rigid = child.addComponent(Laya.PhysicsCollider);
                    var colliderShape = new Laya.MeshColliderShape();
                    colliderShape.mesh = child.meshFilter.sharedMesh;
                    rigid.colliderShape = colliderShape;
                }
                /** Rotator */
                else if (child.name.search("Rotator") >= 0) {
                    console.log(child.name + " to rotator");
                    // add script
                    var rotator = child.addComponent(Rotator_1.default);
                    var moveType = "move_left";
                    if (child.name.search("Rotator.\\\(1\\\)_0") >= 0) {
                        moveType = "move_right";
                    }
                    else if (child.name.search("Rotator.\\\(2\\\)_0") >= 0) {
                        moveType = "move_up";
                    }
                    else if (child.name.search("Rotator.\\\(3\\\)_0") >= 0) {
                        moveType = "move_down";
                    }
                    rotator.setMoveType(moveType);
                    child.name = "rotator";
                }
                else {
                    child.destroy();
                }
            }
        }));
    };
    /** mouse click event: shoot a bullet */
    GameScene.prototype.onClick = function () {
        // update
        this.currBulletNum++;
        // play shoot animation
        this.shootTime = Const.PlayerShootLifeTime;
        this.playerAni.speed = 1;
        // get ray
        this.mousePoint.x = Laya.MouseManager.instance.mouseX;
        this.mousePoint.y = Laya.MouseManager.instance.mouseY;
        this.camera.viewportPointToRay(this.mousePoint, this.ray);
        // get bullet shooting direction
        if (this.scene3D.physicsSimulation.rayCast(this.ray, this.hitResult, 30)) {
            // direction vector: [bullet init point] to [mouse hit point]
            Laya.Vector3.subtract(this.hitResult.point, Const.BulletInitPos, this.bulletDirection);
        }
        else {
            // direction vector: [camera point] to [mouse hit point]
            var aV3 = new Laya.Vector3();
            // ray direction scale: to depth scaleZ
            var scaleV = this.camera.farPlane;
            scaleV = 20;
            Laya.Vector3.scale(this.ray.direction, scaleV, aV3);
            // direction vector: [bullet init point] to [camera point]
            var bV3 = new Laya.Vector3();
            Laya.Vector3.subtract(this.camera.transform.position, Const.BulletInitPos, bV3);
            // direction vector: [bullet init point] to [mouse hit point]
            Laya.Vector3.add(aV3, bV3, this.bulletDirection);
        }
        Laya.Vector3.normalize(this.bulletDirection, this.bulletDirection);
        this.bulletVelocity = 50;
        Laya.Vector3.scale(this.bulletDirection, this.bulletVelocity, this.bulletDirection);
        // generate bullet
        var bullet = this._bullet.clone();
        bullet.name = "bullet";
        this.scene3D.addChild(bullet);
        var bulletRigid = bullet.getComponent(Laya.Rigidbody3D);
        bulletRigid.linearVelocity = this.bulletDirection.clone();
        bullet.addComponent(Bullet_1.default);
    };
    return GameScene;
}(layaMaxUI_1.ui.game.GameSceneUI));
exports.default = GameScene;
},{"../Const":3,"../component/Bullet":4,"../component/Rotator":5,"../component/Stand":6,"../component/Target":7,"./../../ui/layaMaxUI":9}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var game;
    (function (game) {
        var GameSceneUI = /** @class */ (function (_super) {
            __extends(GameSceneUI, _super);
            function GameSceneUI() {
                return _super.call(this) || this;
            }
            GameSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("game/GameScene");
            };
            return GameSceneUI;
        }(Scene));
        game.GameSceneUI = GameSceneUI;
        REG("ui.game.GameSceneUI", GameSceneUI);
    })(game = ui.game || (ui.game = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
