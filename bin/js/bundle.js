var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameScene_1 = require("./script/runtime/GameScene");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/runtime/GameScene.ts", GameScene_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "game/GameScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = true;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/runtime/GameScene":6}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** version */
exports.VERSION = "1.0.0";
/** pages */
exports.URL_HomeView = "home/HomeView.scene";
exports.URL_GameScene = "game/GameScene.scene";
exports.URL_OverView = "over/OverView.scene";
exports.URL_ReviveView = "dialog/ReviveView.scene";
/** camera */
exports.CameraInitPos = new Laya.Vector3(0, 0, 0);
exports.CameraInitRotEuler = new Laya.Vector3(0, 0, 0);
/** directional light */
exports.LightInitPos = new Laya.Vector3(0, 5, 0);
exports.LightInitRotEuler = new Laya.Vector3(-45, 0, 0);
/** platform */
exports.PlatformInitPos = new Laya.Vector3(0, -3, -15);
exports.PlatformInitRot = new Laya.Vector3(0, 37, 0);
exports.PlatformWidth = 5;
exports.PlatformHeight = 0.3;
exports.PlatformStandRadius = 0.3;
exports.PlatformStandHeight = 10;
// winning check frame
exports.WinCheckTime = 180;
/** cube piece */
exports.CubePieceResUrl = "res/cube_piece.lm";
exports.CubePiecesNum = 3;
exports.CubeBrokenTime = 120;
/** bullet */
exports.BulletResUrl = "res/bullet.lh";
exports.BulletInitPos = new Laya.Vector3(-0.1, -1, -4);
exports.BulletInitRot = new Laya.Vector3(180, 0, 0);
exports.BulletRadius = 0.15;
/** player */
exports.PlayerResUrl = "res/human.lh";
exports.PlayerInitPos = new Laya.Vector3(0, -0.6, -1);
exports.PlayerInitRot = new Laya.Vector3(90, 168, 0);
exports.PlayerInitScale = new Laya.Vector3(20, 20, 20);
exports.PlayerShootLifeTime = 10;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Const = require("../Const");
var GameScene_1 = require("../runtime/GameScene");
var Cube = /** @class */ (function (_super) {
    __extends(Cube, _super);
    function Cube() {
        var _this = _super.call(this) || this;
        _this._type = 1 /* DEFAULT */;
        _this.isHit = false;
        _this.velocityBroken = 10;
        _this.collisionWhiteList = ["bullet", "cube"];
        /** cube pieces */
        _this.cubePiecesList = [];
        _this.cubePiecesPosList = [];
        _this.cubePiecesRotList = [];
        _this.cubePiecesFrameIdx = Const.CubeBrokenTime;
        return _this;
    }
    Cube.prototype.onAwake = function () {
        this.cube = this.owner;
        this.initCubePieces();
    };
    Object.defineProperty(Cube.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (v) {
            this._type = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Cube.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (v) {
            this._width = v;
        },
        enumerable: true,
        configurable: true
    });
    Cube.prototype.onCollisionEnter = function (collision) {
        var bullet = collision.other.owner;
        var bullet_idx = this.collisionWhiteList.indexOf(bullet.name);
        if (bullet_idx >= 0) {
            if (this.type === 2 /* GLASS */) {
                // 高速度可击碎
                var velocity = bullet.getComponent(Laya.Rigidbody3D).linearVelocity.clone();
                var velocityValue = Math.sqrt(Math.pow(velocity.x, 2) + Math.pow(velocity.y, 2) + Math.pow(velocity.z, 2));
                if (velocityValue >= this.velocityBroken) {
                    this.isHit = true;
                    this.hitPoint = collision.other.owner.transform.localPosition.clone();
                }
            }
        }
    };
    Cube.prototype.onUpdate = function () {
        if (this.isHit) {
            if (this.type === 2 /* GLASS */) {
                this.broken();
            }
        }
    };
    Cube.prototype.broken = function () {
        // play broken sound
        var _this = this;
        // change to pieces
        this.effectCubeBroken(this.cube.transform.position.clone());
        Laya.timer.frameOnce(1, this, function () {
            _this.cube.removeSelf();
        });
    };
    /** init cube pieces */
    Cube.prototype.initCubePieces = function () {
        var _this = this;
        Laya.Mesh.load(Const.CubePieceResUrl, Laya.Handler.create(this, function (mesh) {
            var cubePiece = new Laya.MeshSprite3D(mesh);
            var mat = new Laya.BlinnPhongMaterial();
            mat.renderMode = Laya.BlinnPhongMaterial.RENDERMODE_TRANSPARENT;
            mat.albedoColor = new Laya.Vector4(0.7, 0.7, 1, 0.7);
            cubePiece.meshRenderer.material = mat;
            cubePiece.active = false;
            var pieceRigid = cubePiece.addComponent(Laya.Rigidbody3D);
            var pieceColliderShape = new Laya.MeshColliderShape();
            pieceColliderShape.mesh = cubePiece.meshFilter.sharedMesh;
            pieceRigid.colliderShape = pieceColliderShape;
            for (var i = 0; i < Const.CubePiecesNum; i++) {
                _this.cubePiecesList.push(cubePiece.clone());
                GameScene_1.default.instance.scene3D.addChild(_this.cubePiecesList[i]);
                _this.cubePiecesPosList.push(new Laya.Vector3());
                _this.cubePiecesRotList.push(new Laya.Vector3());
            }
        }));
    };
    /** cube broken to pieces */
    Cube.prototype.effectCubeBroken = function (worldPos) {
        for (var idx in this.cubePiecesList) {
            this.cubePiecesList[idx].active = true;
            this.cubePiecesList[idx].transform.position = worldPos.clone();
            // pos
            this.cubePiecesPosList[idx].x = (Math.random() - 0.5) * 2;
            this.cubePiecesPosList[idx].y = (Math.random() - 0.5) * 2;
            this.cubePiecesPosList[idx].z = (Math.random() - 0.5) * 2;
            Laya.Vector3.scale(this.cubePiecesPosList[idx], 1, this.cubePiecesPosList[idx]);
            // rot
            this.cubePiecesRotList[idx].x = (Math.random() - 0.5) * 2;
            this.cubePiecesRotList[idx].y = (Math.random() - 0.5) * 2;
            this.cubePiecesRotList[idx].z = (Math.random() - 0.5) * 2;
            Laya.Vector3.scale(this.cubePiecesRotList[idx], 90, this.cubePiecesRotList[idx]);
            // size scale
            var rand_scale = (Math.random() * 0.3 + 0.7) * this.width * 2;
            this.cubePiecesList[idx].transform.localScale = new Laya.Vector3(rand_scale, rand_scale, rand_scale);
            this.cubePiecesList[idx].getComponent(Laya.Rigidbody3D).linearVelocity = this.cubePiecesPosList[idx].clone();
        }
        // start looping
        this.cubePiecesFrameIdx = 0;
        Laya.timer.frameLoop(1, this, this.cubePiecesLoop);
    };
    /** cube breaking loop */
    Cube.prototype.cubePiecesLoop = function () {
        var flag = false;
        for (var idx in this.cubePiecesList) {
            if (this.cubePiecesFrameIdx >= Const.CubeBrokenTime) {
                flag = true;
                this.cubePiecesList[+idx].active = false;
            }
        }
        this.cubePiecesFrameIdx++;
        if (flag) {
            Laya.timer.clear(this, this.cubePiecesLoop);
        }
    };
    return Cube;
}(Laya.Script3D));
exports.default = Cube;
},{"../Const":3,"../runtime/GameScene":6}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Const = require("../Const");
var Platform = /** @class */ (function (_super) {
    __extends(Platform, _super);
    function Platform() {
        var _this = _super.call(this) || this;
        _this.winCount = 0;
        _this.collisionWhiteList = ["cube"];
        return _this;
    }
    Platform.prototype.onAwake = function () {
        this.platform = this.owner;
    };
    Platform.prototype.onUpdate = function () {
        this.winCount++;
        if (this.winCount > Const.WinCheckTime) {
            // player win
            console.log("You win.");
        }
    };
    Platform.prototype.onCollisionStay = function (collision) {
        if (this.collisionWhiteList.indexOf(collision.other.owner.name) >= 0) {
            this.winCount = 0;
        }
    };
    return Platform;
}(Laya.Script3D));
exports.default = Platform;
},{"../Const":3}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../../ui/layaMaxUI");
var Const = require("../Const");
var Platform_1 = require("../component/Platform");
var Cube_1 = require("../component/Cube");
var GameScene = /** @class */ (function (_super) {
    __extends(GameScene, _super);
    function GameScene() {
        var _this = _super.call(this) || this;
        _this.cubeList = [];
        _this.cubeNumX = 4;
        _this.cubeNumY = 4;
        _this.cubeNumZ = 3;
        _this.bulletRadius = 0.02;
        _this.bulletVelocity = 1;
        _this.bulletDirection = new Laya.Vector3();
        _this.shootTime = -1;
        /** raycast */
        _this.mousePoint = new Laya.Vector2();
        _this.ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));
        _this.hitResult = new Laya.HitResult();
        GameScene.instance = _this;
        _this.initScene3D();
        _this.initGameStage();
        _this.initPlayer();
        _this.initBullet();
        return _this;
    }
    /**
     * 打开该单例页面，触发onOpened
     * @param param  onOpened方法的传参
     */
    GameScene.openInstance = function (param) {
        if (GameScene.instance) {
            GameScene.instance.onOpened(param);
            // GameScene.instance.showTutorial();
        }
        else {
            Laya.Scene.open(Const.URL_GameScene, false, param);
        }
    };
    GameScene.prototype.onOpened = function (param) {
        this.visible = true;
        // this.state = Const.GameState.READY;
    };
    ;
    /** initialize scene */
    GameScene.prototype.initScene3D = function () {
        // add scene
        this.scene3D = Laya.stage.addChild(new Laya.Scene3D());
        // camera
        this.camera = this.scene3D.addChild(new Laya.Camera());
        this.camera.transform.localPosition = Const.CameraInitPos.clone();
        this.camera.transform.localRotationEuler = Const.CameraInitRotEuler.clone();
        // direction light
        this.directionLight = this.scene3D.addChild(new Laya.DirectionLight());
        this.directionLight.transform.localPosition = Const.LightInitPos.clone();
        this.directionLight.transform.localRotationEuler = Const.LightInitRotEuler.clone();
    };
    /** initialize game stage */
    GameScene.prototype.initGameStage = function () {
        /** init platform */
        this.initPlatfrom();
        /** init cube */
        this._cube = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(1, 1, 1));
        this._cube.name = "cube";
        var cubeRigid = this._cube.addComponent(Laya.Rigidbody3D);
        cubeRigid.colliderShape = new Laya.BoxColliderShape(1, 1, 1);
        cubeRigid.mass = 1;
        // cubeRigid.restitution = 0.2;
        // cubeRigid.friction = 10;
        // cubeRigid.rollingFriction = 0;
        // // block physics sim
        // cubeRigid.angularFactor = new Laya.Vector3(0, 0, 0);
        // cubeRigid.linearFactor = new Laya.Vector3(0, 0, 0);
        /** game stage */
        var cubeNum = this.cubeNumX * this.cubeNumY * this.cubeNumZ;
        var tmp = this.cubeNumX > this.cubeNumY ? this.cubeNumX : this.cubeNumY;
        tmp = this.cubeNumZ > this.cubeNumY ? this.cubeNumZ : this.cubeNumY;
        var padding = 1;
        this.cubeWidth = (Const.PlatformWidth - padding * 2) / tmp;
        var initX = (this.cubeNumX % 2 == 1) ? (-Math.floor(this.cubeNumX / 2) * this.cubeWidth) : (this.cubeWidth / 2 - this.cubeNumX / 2 * this.cubeWidth);
        var initY = (Const.PlatformHeight + this.cubeWidth) / 2;
        var initZ = (this.cubeNumZ % 2 == 1) ? (-Math.floor(this.cubeNumZ / 2) * this.cubeWidth) : (this.cubeWidth / 2 - this.cubeNumZ / 2 * this.cubeWidth);
        for (var x = 0; x < this.cubeNumX; x++) {
            for (var y = 0; y < this.cubeNumY; y++) {
                for (var z = 0; z < this.cubeNumZ; z++) {
                    var cube = this._cube.clone();
                    cube.transform.localScale = new Laya.Vector3(this.cubeWidth, this.cubeWidth, this.cubeWidth);
                    cube.transform.localPosition = new Laya.Vector3(initX + this.cubeWidth * x, initY + this.cubeWidth * y, initZ + this.cubeWidth * z);
                    this.platform.addChild(cube);
                    var cubeScript = cube.addComponent(Cube_1.default);
                    cubeScript.type = 2 /* GLASS */;
                    cubeScript.width = this.cubeWidth;
                    this.cubeList.push(cubeScript);
                }
            }
        }
    };
    /** initialize platfrom */
    GameScene.prototype.initPlatfrom = function () {
        /** platform */
        // create mesh
        this.platform = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(Const.PlatformWidth, Const.PlatformHeight, Const.PlatformWidth));
        this.scene3D.addChild(this.platform);
        this.platform.addComponent(Platform_1.default);
        this.platform.transform.localPosition = Const.PlatformInitPos.clone();
        this.platform.transform.localRotationEuler = Const.PlatformInitRot.clone();
        // set physics
        var collider = this.platform.addComponent(Laya.PhysicsCollider);
        collider.colliderShape = new Laya.BoxColliderShape(Const.PlatformWidth, Const.PlatformHeight, Const.PlatformWidth);
        /** stand */
        // create mesh
        this.platform_stand = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createCylinder(Const.PlatformStandRadius, Const.PlatformStandHeight));
        this.platform.addChild(this.platform_stand);
        this.platform_stand.transform.localPosition = new Laya.Vector3(0, -Const.PlatformStandHeight / 2, 0);
        // set physics
        var collider_stand = this.platform_stand.addComponent(Laya.PhysicsCollider);
        collider_stand.colliderShape = new Laya.CylinderColliderShape(Const.PlatformStandRadius, Const.PlatformStandHeight);
    };
    /** initialize player */
    GameScene.prototype.initPlayer = function () {
        var _this = this;
        Laya.Sprite3D.load(Const.PlayerResUrl, Laya.Handler.create(this, function (res) {
            _this.player = res;
            _this.scene3D.addChild(_this.player);
            _this.playerAni = _this.player.getComponent(Laya.Animator);
            _this.player.transform.localPosition = Const.PlayerInitPos.clone();
            _this.player.transform.localRotationEuler = Const.PlayerInitRot.clone();
            _this.player.transform.localScale = Const.PlayerInitScale.clone();
            _this.player.name = "player";
            var shadowMat = _this.player.getChildByName("shadow_0").meshRenderer.material;
            shadowMat.renderMode = Laya.BlinnPhongMaterial.RENDERMODE_TRANSPARENT;
            shadowMat.albedoColorA = 0.2;
            // mouse click event listen: shoot a bullet
            Laya.stage.on(Laya.Event.CLICK, _this, _this.onClick);
            // onUpdate
            _this.gameStart();
        }));
    };
    /** initialize bullet */
    GameScene.prototype.initBullet = function () {
        this._bullet = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(Const.BulletRadius));
        /** set physic */
        var bulletRigid = this._bullet.addComponent(Laya.Rigidbody3D);
        // set collieder shape
        bulletRigid.colliderShape = new Laya.SphereColliderShape(Const.BulletRadius);
        // quick moving detecion
        bulletRigid.ccdMotionThreshold = 0.0001;
        bulletRigid.ccdSweptSphereRadius = Const.BulletRadius;
        // mass
        bulletRigid.mass = 1;
        /** trasform */
        this._bullet.transform.localPosition = Const.BulletInitPos.clone();
        this._bullet.transform.localRotationEuler = Const.BulletInitRot.clone();
        this._bullet.name = "_bullet";
    };
    /** game start */
    GameScene.prototype.gameStart = function () {
        var _this = this;
        // shooting animation
        this.playerAni.getDefaultState().clip.islooping = true;
        this.playerAni.play();
        Laya.timer.frameLoop(1, this, function () {
            // game state check
            // play shooting animation
            _this.shootTime--;
            if (_this.shootTime < 0) {
                // stop playing
                _this.playerAni.speed = 0;
            }
        });
    };
    /** mouse click event: shoot a bullet */
    GameScene.prototype.onClick = function () {
        // play shoot animation
        this.shootTime = Const.PlayerShootLifeTime;
        this.playerAni.speed = 1;
        // get ray
        this.mousePoint.x = Laya.MouseManager.instance.mouseX;
        this.mousePoint.y = Laya.MouseManager.instance.mouseY;
        this.camera.viewportPointToRay(this.mousePoint, this.ray);
        // get bullet shooting direction
        if (this.scene3D.physicsSimulation.rayCast(this.ray, this.hitResult, 30)) {
            // direction vector: [bullet init point] to [mouse hit point]
            Laya.Vector3.subtract(this.hitResult.point, Const.BulletInitPos, this.bulletDirection);
        }
        else {
            // direction vector: [camera point] to [mouse hit point]
            var aV3 = new Laya.Vector3();
            // ray direction scale: to depth scaleZ
            var scaleV = this.camera.farPlane;
            scaleV = 12;
            Laya.Vector3.scale(this.ray.direction, scaleV, aV3);
            // direction vector: [bullet init point] to [camera point]
            var bV3 = new Laya.Vector3();
            Laya.Vector3.subtract(this.camera.transform.position, Const.BulletInitPos, bV3);
            // direction vector: [bullet init point] to [mouse hit point]
            Laya.Vector3.add(aV3, bV3, this.bulletDirection);
        }
        Laya.Vector3.normalize(this.bulletDirection, this.bulletDirection);
        this.bulletVelocity = 50;
        Laya.Vector3.scale(this.bulletDirection, this.bulletVelocity, this.bulletDirection);
        // generate bullet
        var bullet = this._bullet.clone();
        bullet.name = "bullet";
        this.scene3D.addChild(bullet);
        var bulletRigid = bullet.getComponent(Laya.Rigidbody3D);
        bulletRigid.linearVelocity = this.bulletDirection.clone();
    };
    return GameScene;
}(layaMaxUI_1.ui.game.GameSceneUI));
exports.default = GameScene;
},{"../Const":3,"../component/Cube":4,"../component/Platform":5,"./../../ui/layaMaxUI":7}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var game;
    (function (game) {
        var GameSceneUI = /** @class */ (function (_super) {
            __extends(GameSceneUI, _super);
            function GameSceneUI() {
                return _super.call(this) || this;
            }
            GameSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("game/GameScene");
            };
            return GameSceneUI;
        }(Scene));
        game.GameSceneUI = GameSceneUI;
        REG("ui.game.GameSceneUI", GameSceneUI);
    })(game = ui.game || (ui.game = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
